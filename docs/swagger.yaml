basePath: /
definitions:
  dto.Comment:
    properties:
      comment:
        type: string
      mehmId:
        type: integer
    type: object
  dto.CommentDTO:
    properties:
      author:
        type: string
      dateTime:
        type: string
      id:
        type: string
    type: object
  dto.CommentInput:
    properties:
      id:
        minimum: 1
        type: integer
      text:
        type: string
    type: object
  dto.MehmDTO:
    properties:
      authorName:
        type: string
      createdDate:
        type: string
      description:
        type: string
      genre:
        type: integer
      id:
        type: integer
      imageSource:
        type: string
      likes:
        type: integer
      title:
        type: string
    type: object
  entity.DeleteUserInput:
    properties:
      id:
        type: string
    type: object
  entity.User:
    properties:
      _id:
        type: string
      admin:
        type: boolean
      email:
        type: string
      name:
        type: string
      password:
        items:
          type: integer
        type: array
    type: object
  errors.ProceduralError:
    properties:
      message:
        type: string
    type: object
host: localhost:420/api
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /comments/get/{id}:
    get:
      consumes:
      - application/json
      description: By specifying the comment id, you can read that comment
      parameters:
      - description: The ID of the requested comment
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CommentDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/errors.ProceduralError'
      security:
      - bearerToken: []
      summary: Read a specified comment
      tags:
      - comments
  /comments/new:
    post:
      consumes:
      - application/json
      description: With this API-Call you are able to post a comment related to any
        existing Mehm.
      parameters:
      - description: Input data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/errors.ProceduralError'
      security:
      - bearerToken: []
      summary: Post a comment
      tags:
      - comments
  /comments/remove:
    post:
      consumes:
      - application/json
      description: Regular users can only delete their own comments, privileged users
        can delete whatever they wish
      parameters:
      - description: The ID of the requested mehm
        in: query
        minimum: 1
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/errors.ProceduralError'
      security:
      - bearerToken: []
      summary: Delete a Comment
      tags:
      - comments
  /comments/update:
    post:
      consumes:
      - application/json
      description: Here you can edit previously posted comments. An Admin will be
        able to edit other people's comments too.
      parameters:
      - description: Input data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CommentInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/errors.ProceduralError'
      security:
      - bearerToken: []
      summary: Edit an existing comment
      tags:
      - comments
  /mehms:
    get:
      consumes:
      - application/json
      description: Pagination can be handled via query parameters
      parameters:
      - default: 0
        description: states the number of skipped Mehms
        in: query
        minimum: 0
        name: skip
        type: integer
      - default: 30
        description: states the count of grabbed Mehms
        in: query
        maximum: 30
        minimum: 1
        name: take
        type: integer
      - default: ""
        description: search a Mehm by name
        in: query
        maxLength: 32
        minLength: 0
        name: textSearch
        type: string
      - description: filter for a genre
        enum:
        - PROGRAMMING
        - DHBW
        - OTHER
        - ""
        in: query
        name: genre
        type: string
      - description: sort the results
        enum:
        - createdDate
        - likes
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/dto.MehmDTO'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProceduralError'
      security:
      - bearerToken: []
      summary: Read a page of mehms
      tags:
      - mehms
  /mehms/{id}:
    get:
      consumes:
      - application/json
      description: This will return the requested Mehm including the information whether
        you have liked it already.
      parameters:
      - description: The ID of the requested mehm
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MehmDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/errors.ProceduralError'
      security:
      - bearerToken: []
      summary: View a specified mehm
      tags:
      - mehms
  /mehms/{id}/like:
    post:
      consumes:
      - application/json
      description: 'This is a like-toggle: if the Mehm had been liked already, the
        like will be removed.'
      parameters:
      - description: The ID of the requested mehm
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/errors.ProceduralError'
      security:
      - bearerToken: []
      summary: Like a specified mehm
      tags:
      - mehms
  /mehms/{id}/remove:
    post:
      consumes:
      - application/json
      description: Regular users can only delete their own Mehms, privileged users
        can delete whatever they wish
      parameters:
      - description: The ID of the requested mehm
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/errors.ProceduralError'
      security:
      - bearerToken: []
      summary: Delete a Mehm
      tags:
      - mehms
  /mehms/{id}/update:
    post:
      consumes:
      - application/json
      description: This will be only possible for own Mehms, unless you are privileged
      parameters:
      - description: The ID of the requested mehm
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      - description: The new mehm description
        in: body
        maxLength: 128
        minLength: 1
        name: description
        required: true
        schema:
          type: string
      - description: The new mehm title
        in: body
        maxLength: 32
        minLength: 1
        name: title
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/errors.ProceduralError'
      security:
      - bearerToken: []
      summary: Edit a Mehm's shown information
      tags:
      - mehms
  /user:
    get:
      consumes:
      - application/json
      description: This call will respond with your id, username and email.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProceduralError'
      security:
      - bearerToken: []
      summary: Profile information
      tags:
      - user
  /user/all:
    get:
      consumes:
      - application/json
      description: This is only usable for privileged users and prints all users'
        id, name and admin status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProceduralError'
      security:
      - bearerToken: []
      summary: Show all users
      tags:
      - user
  /user/delete:
    post:
      consumes:
      - application/json
      description: Regular user can only delete theirselves, admin users can delete
        every user
      parameters:
      - description: Input data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/entity.DeleteUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/errors.ProceduralError'
      security:
      - bearerToken: []
      summary: Delete a user
      tags:
      - user
  /user/elevate:
    get:
      consumes:
      - application/json
      description: This is only usable for privileged users
      parameters:
      - description: The ID of the user
        in: query
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProceduralError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProceduralError'
      security:
      - bearerToken: []
      summary: Toggle a users' admin status
      tags:
      - user
securityDefinitions:
  bearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
